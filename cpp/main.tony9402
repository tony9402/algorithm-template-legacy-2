#define LOCAL
/****************************************************************************************************************************/
/*************************************                 My Template Start                *************************************/
/*************************************                                                  *************************************/
/*************************************    Template Version : 2.0.0                      *************************************/
/*************************************    Made By          : tony9402(Minsang Kim)      *************************************/
/****************************************************************************************************************************/
#ifndef LOCAL
#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#endif

#include<bits/stdc++.h>

using namespace std;

/******** #define START ********/
#define all(x)          (x).begin(),(x).end()
#define sortall(x)      sort(all(x))
#define reverseall(x)   reverse(all(x))
#define siz(x)          (int)(x).size()
#define rep(i, n)       for(int i=0;i<(n);i++)
#define repi(i, l, r)   for(int i=l;i<=(r);i++)
#define rrep(i, n)      for(int i=(n)-1;i>=0;i--)
#define rrepi(i, r, l)  for(int i=r;i>=l;i--)
#define pb push_back
#define pf push_front
#define eb emplace_back
#define ef emplace_front
#define ppb pop_back
#define ppf pop_front
#define fi first
#define se second
/******** #define END ********/

/******** type define START ********/
using ull = unsigned long long;
using ll  = long long;
using ld  = long double;
using pii = pair<int, int>;
using pll = pair<long long, long long>;
using pil = pair<int, long long>;
using pli = pair<long long, int>;
using vi  = vector<int>;
using vd  = vector<double>;
using vl  = vector<ll>;
using vii = vector<pii>;
using vll = vector<pll>;
/******** type define END ********/

/******** const START ********/
constexpr char ln  = '\n';
constexpr char sp  = ' ';
constexpr ld PI        = 3.141592653589793238462643383279502884197169399375105820974944;
// 0 ~ 3 -> UDLR, 4 ~ 7 -> (diag)UDLR, 8 ~ 15 -> knight
constexpr int dy[] = {-1,1,0,0,-1,-1,1,1,-2,-1,1,2,2,1,-1,-2};
constexpr int dx[] = {0,0,-1,1,-1,1,-1,1,1,2,2,1,-1,-2,-2,-1};
/******** const END ********/

/******** DEBUG TEMPLATE START ********/
#ifdef LOCAL
void _DEBUG_S(string _s="") { cerr << "\n[------- " << _s << " ---------]\n"; }
template<typename Type> void _DEBUG(Type arg) { cerr << arg; }
template<typename Type, typename... Types> void _DEBUG(Type arg, Types ...args) { cerr << arg << ", ", _DEBUG(args...); }
#define debug(...) cerr << "[ " << #__VA_ARGS__ << " ] : ", _DEBUG(__VA_ARGS__)
#define debug2(...) _DEBUG_S("DEBUG START") debug(__VA_ARGS__) _DEBUG_S("DEBUG END")

#else
#define debug(...)
#define debug2(...)
#endif 
/******** DEBUG TEMPLATE END ********/

/******** I/O TEMPLATE START ********/
template<int fp=0> struct fastio{ fastio(){ 
#ifndef LOCAL
    if(fp>=0)ios::sync_with_stdio(false); cin.tie(0); 
#endif 
    if(fp>0)cout << fixed << setprecision(fp); 
} };

template<typename Type> void input(Type &arg){cin >> arg;}
template<typename Type, typename... Types> void input(Type &arg, Types &...args){cin>>arg;input(args...);}
template<typename Type> void output(Type arg){cout<<arg;}
template<typename Type, typename... Types> void output(Type arg, Types ...args){cout<<arg;output(args...);}
template<typename T1, typename T2> inline istream& operator>>(istream &in, pair<T1, T2> &_p) { cin >> _p.first >> _p.second; return in; }
template<typename Type> inline ostream& operator<<(ostream &out, const vector<Type> &v) { for(auto &i: v) out<<i<<' '; return out; }
template<typename Type> inline istream& operator>>(istream &in, vector<Type> &v)       { for(auto &i: v) in>>i; return in; }
template<typename Type> inline ostream& operator<<(ostream &out, const deque<Type> &v) { for(auto &i: v) out<<i<<' '; return out; }
template<typename Type> inline istream& operator>>(istream &in, deque<Type> &v)       { for(auto &i: v) in>>i; return in; }
/******** I/O TEMPLATE END ********/

template<typename T>
T power(T a, T b, T mod=numeric_limits<T>::max()){
    if(b == 0)return 1;
    if(b % 2)return a * power(a, b-1, mod) % mod;
    return power(a * a % mod, b >> 1, mod);
}
ll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }
ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
ll extgcd(ll a, ll b, ll &x, ll &y){
    if(b) {
        ll d = extgcd(b, a % b, y, x);
        return y -= a / b * x, d;
    }
    return x = 1, y = 0, a;
}
ll MOD = 1e9 + 7;
struct mint {
    ll x;
    mint() { }
    mint(ll xx):x(xx){ } 
    mint operator+(mint o) { return mint( ( x + o.x ) % MOD); }
    void operator+=(mint o) { *this = mint( ( x + o.x ) % MOD); }
    mint operator-(mint o) { return mint( (x - o.x + MOD) % MOD); }
    void operator-=(mint o) { *this = mint( (x - o.x + MOD) % MOD); }
    mint operator*(mint o) { return mint( ( x * o.x ) % MOD); }
    void operator*=(mint o) { *this = mint( ( x * o.x ) % MOD); }
    mint operator/(mint o) { return *this * invert(o); }
    void operator/=(mint o) { *this = *this * invert(o); }
    bool operator<(mint o) { return x < o.x; }
    bool operator<=(mint o) { return x <= o.x; }
    bool operator>(mint o) { return x > o.x; }
    bool operator>=(mint o) { return x >= o.x; }
    bool operator==(mint o) { return x == o.x; }
    bool operator!=(mint o) { return x != o.x; }
    template<typename T> void operator=(T xx) { *this = mint(xx); }
    mint invert(mint o) { 
        ll x, y, g = extgcd(o.x, MOD, x, y); assert(g == 1); 
        return mint((x + MOD) % MOD);
    }
    mint operator^(ll e) { return power(x, e, MOD); }
    void operator^=(ll e) { *this = power(x, e, MOD); }
    mint operator^(mint o) { return power(x, o.x, MOD); }
    void operator^=(mint o) { *this = power(x, o.x, MOD); }
};
inline istream& operator>>(istream &in, mint &x) { in >> x.x; return in; }
inline ostream& operator<<(ostream &out, const mint &x) { out << x.x; return out; }
/****************************************************************************************************************************/
/*************************************                   My Template End                *************************************/
/****************************************************************************************************************************/

int main(){
    fastio<>();

    return 0;
}
