template<ll MOD=1000000007>
struct mint {
    ll x;
    mint() { }
    mint(ll xx):x(xx){ }
    mint<MOD> operator+(mint<MOD> o) { return mint<MOD>( ( x + o.x ) % MOD); }
    void operator+=(mint<MOD> o) { *this = mint<MOD>( ( x + o.x ) % MOD); }
    mint<MOD> operator-(mint<MOD> o) { return mint<MOD>( (x - o.x + MOD) % MOD); }
    mint<MOD> operator-() { return mint<MOD>(0) - *this; }
    void operator-=(mint<MOD> o) { *this = mint<MOD>( (x - o.x + MOD) % MOD); }
    mint<MOD> operator*(mint<MOD> o) { return mint<MOD>( ( x * o.x ) % MOD); }
    void operator*=(mint<MOD> o) { *this = mint<MOD>( ( x * o.x ) % MOD); }
    mint<MOD> operator/(mint<MOD> o) { return *this * invert(o); }
    void operator/=(mint<MOD> o) { *this = *this * invert(o); }
    bool operator<(mint<MOD> o) { return x < o.x; }
    bool operator<=(mint<MOD> o) { return x <= o.x; }
    bool operator>(mint<MOD> o) { return x > o.x; }
    bool operator>=(mint<MOD> o) { return x >= o.x; }
    bool operator==(mint<MOD> o) { return x == o.x; }
    bool operator!=(mint<MOD> o) { return x != o.x; }
    mint<MOD> operator++() { *this += 1; return *this; }
    const mint<MOD> operator++(int) { const mint<MOD> ret(x); *this += 1; return ret;}
    mint<MOD> operator--() { *this -= 1; return *this; }
    const mint<MOD> operator--(int) { const mint<MOD> ret(x); *this -= 1; return ret;}
    template<typename T> void operator=(T xx) { *this = mint<MOD>(xx); }
    mint<MOD> invert(mint o) {
        ll x, y, g = extgcd(o.x, MOD, x, y); assert(g == 1);
        return mint((x + MOD) % MOD);
    }
    mint<MOD> operator^(ll e) { return power(x, e, MOD); }
    void operator^=(ll e) { *this = power(x, e, MOD); }
    mint<MOD> operator^(mint o) { return power(x, o.x, MOD); }
    void operator^=(mint o) { *this = power(x, o.x, MOD); }
};
template<ll MOD=1000000007> inline istream& operator>>(istream &in, mint<MOD> &x) { in >> x.x; return in; }
template<ll MOD=1000000007> inline ostream& operator<<(ostream &out, const mint<MOD> &x) { out << x.x; return out; }
